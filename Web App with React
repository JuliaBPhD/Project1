npm install browserify reactify watchify uglify-js react
NODE_ENV=productoin browserify -t [ reactify --es6 ] main.js | uglifyjs> compiled.min.js
watchify -v -d -t [ reactify --es6 ] main.js -o compiled.js

//app.js
var React = require('react');

var Search = require('./Search');
var Map = require('./Map');
var Current Location = require('./CurrentLocation');
var LocationList = require('./LocationList');

var App = React.createClass({
     getInitialState(){
      // Extract the favorite locations from local storage
      
      var favorites = [];
      
      if (localStorage.favorites){
            favorites = JSON.parse(localStorage.favorites)
            }
      //Nobody would get get if we center it on Paris by default
      
      return {
          favorites: favorites,
          currentAddress: 'Paris, France', 
          mapCoordinates: {
               lat: 48.856614,
               lng: 2.3522219
               }
          };
   },
   
 toggleFavorite(address){
     if(this.isAddressInFavorites(address)){
         this.removeFromFavorites(address);
     }
     else{
         this.addToFavorites(address);
         }
  },
  
  addToFavorites(address){
  
      var favorites = this.state.favorites;
      
      favorites.push({
          address: address, 
          timestamp: Date.now()
      });
      
      this.setState({
          favorites: favorites
          });
      
      localStorage.favorites = JSON.stringify(favorites);
},

removeFromFavorites(address){
     
     var favorites = this.state.favorites;
     
     var index = -1;
     
     for(var i = 0; i < favorites.length; i++){
     
         if(favorites[i].address == address){
             index = i;
             break; 
             }
      }
     
     // If it was found, remove it from the favorites array

    if(index !== -1){
    
         favorites.splice(index, 1); 
         
         this.setState({
             favorites: favorites
         });
         
         localStorage.favorites = JSON.stringify(favorites);
         }
         
 },
 isAddressInFavorites(address){
      
      var favorites = this.state.favorites;
      
      for(var i = 0; i < favorites.length; i++){
      
           if(favorites[i].address == address){
                return true; 
           }
           
       }
       
       return false; 
 },
 
 searchForAddress(address){
 
     var self = this;
     
 //We will use GMaps' geocode functionality, 
 //which is bujilt on top of the Google Maps API
 
      GMaps.geocode({
          address: address, 
          callback: function(results, status) {
          
               if (status !== 'OK') return; 
               
               var latlng = results[0].geometry.location;
               
               self.setState({
                    currentAddress" results[0].formatted_address, 
                    mapCoordinates: {
                        lat: latlng.lat(), 
                        lng: latlng.lng()
                    }
              });
       },
  });

},

render(){

    return (
       <div>
            <h1> Your Google Maps Locations </h1>
            
            <Search onSearch={this.searchForAddress}/>
            
            <Map lat={this.state.mapCoordinates.lat} lng={this.state.mapCoordinates.lng} />
            
            <CurrentLocation address={this.state.currentAddress}
                 favorites={this.isAddressInFavorites(this.state.currentAddress)}
                 onFavoriteToggle={this.toggleFavorite}/>
             
             <LocationList locations={this.state.favorites} activeLocationAddress={this.state.currentAddress}
                  onClick={this.searchForAddress}/>
             
         </div>
         
        );
      }
   });
   
 module.exports = App;

//CurrentLocation
var React = require('react'); 

var CurrentLocation = React.createClass({
    toggleFavorite(){
        this.props.onFavoriteToggle(this.props.address); 
    },
    
    render(){
    
        var starClassName = 'glyphicon glyphicon-star-empty';
        
        if(this.props.favorit){
            starClassName = 'glyphicon glyphicon-star';
        }
        
        return (
            <div className='col-xs-12 col-md-6 col-md-offset-3 current-location'>
                <h4 id = 'save-location'>{this.props.address} </h4>
                <span className={starClassName} onClick={this.toggleFavorite} aria-hidden='true'></span>
             </div>
           );
        }
    });
  module.exports = CurrentLocation; 

//LocationList

var React = require('react');
var LocationItem = require ('./LocationItem');

var LocationList = React.createClass({

     render(){
     
          var self = this;
          
          var locations = this.props.locations.map(function(1){
          
               var active = self.props.activeLocationAddress == 1.address; 
               
               //passing the onCLick callback of this LocationList to each location
               
               return <LocationItem address={1.address} timestamp={1.timestamp}
                       active={active} onClick={self.props.onClick} />
                });
                
               if(!locations.length){
                   return null; 
               }
               
               return (
                   <div className='list group col-xs-12 col-md-6 col-md-offset-3'>
                       <span className='list-group-item active'> Saved Locations </span>
                       {locations}
                   </div>
                )
             }
       });
       
       module.exports=LocationsList;
//LocationItem
var React = require('react'); 
var moment = require('moment');

var LocationItem = React.createClass({
    
    handleClick();
        this.props.onCLick(this.props.address);
        }
        
    return  (
        <a className={cn} onClick={this.handleClick}>
          {this.props.address}
          <span className='createdAt'>{ moment (this.props.timestamp).fromNow() } </span>
          <span className='glyphicon glyphicon-menu-right'></span>
        </a>
       )
       
    }
 });
 
 module.exports = LocationItem; 
 
 //Map
 var React = require('react');
 
 var Map = React.createClass({
 
     componentDidMount(){
     //calling method manually 
     
     this.componentDidUpdate()'
   };
   
   componentDidUpdate(){
   
       if(this.lastLat == this.props.lat && this.latLng == this.props.lng){
       
       return; 
    }
    
    this.lastLat = this.props.lat; 
    this.lastLng = this.props.lng; 
    
    var map = new GMaps ({
        el: '#map',
        lat: this.props.lat, 
        lng: this.props.lng
     });
     
     //Adding a marker
     
     map.addMarker({
         lat: this.props.lat, 
         lng: this.props.lng
     });
  },
  
  redner(){
  
      return (
          <div className='map-holder'>
               <p> Loading....</p>
               <div id='map'></div>
          );
      }
      
   });
   
   module.exports: Map; 
   
   //Search
   
   var React = require('react'); 
   
   var Search = React.createClass({
   
       getInitialState() {
           return { value: ' ' }; 
           },
           
       handleChange(event) {
           
           event.preventDefault();
           
           //When form is submitted, call onSearch classback that is passed to the component
           
           this.props.onSearch(this.state.value); 
           
           //unfocus the text input field
           
           this.getDOMNode().querySelector('input').blur();
         };
         
         render() {
           
             return (
                 <form id='geocoding_form' className='form-horizonatal' onSubmit={this.handleSubmit}>
                     <div className='form-group'>
                         <div className='input-group'>
                             <input type='text' className='form-control' id='address' placeholder='Find a location..." 
                              value={this.state.value} onChange={this.handleChange}/>
                              <span className='input-group-btn'>
                                   <span className='glyphicon glyphicon-search' aria-hidden='true></span>
                              </span>
                         </div>
                      </div>
                  </form>
              );
            
            }
       });
       
      module.exports = Search;
      
      //main
      
      var React = require('react');
      var App = require('./components/App');
      
      React.redner(
         <App /> ,
         document.getElementById('main')
      ); 
      
     //end of code
       
         
           }
     
    
          
              
                
                
  
                
            
        

